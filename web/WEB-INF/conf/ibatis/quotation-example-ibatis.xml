<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap>

  <!-- Use type aliases to avoid typing the full classname every time. -->
  <!--<typeAlias alias="Account" type="com.mydomain.domain.Account"/>

   Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties 
       exactly. 
  <resultMap id="AccountResult" class="Account">
    <result property="id" column="ACC_ID"/>
    <result property="firstName" column="ACC_FIRST_NAME"/>
    <result property="lastName" column="ACC_LAST_NAME"/>
    <result property="emailAddress" column="ACC_EMAIL"/>
  </resultMap>

   Select with no parameters using the result map for Account class. 
  <select id="selectAllAccounts" resultMap="AccountResult">
    select * from ACCOUNT
  </select>

   A simpler select example without the result map.  Note the 
       aliases to match the properties of the target result class. 
  <select id="selectAccountById" parameterClass="int" resultClass="Account">
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #id#
  </select>
   
   Insert example, using the Account parameter class 
  <insert id="insertAccount" parameterClass="Account">
    insert into ACCOUNT (
      ACC_ID,
      ACC_FIRST_NAME,
      ACC_LAST_NAME,
      ACC_EMAIL
    values (
      #id#, #firstName#, #lastName#, #emailAddress#
    )
  </insert>

   Update example, using the Account parameter class 
  <update id="updateAccount" parameterClass="Account">
    update ACCOUNT set
      ACC_FIRST_NAME = #firstName#,
      ACC_LAST_NAME = #lastName#,
      ACC_EMAIL = #emailAddress#
    where
      ACC_ID = #id#
  </update>

   Delete example, using an integer as the parameter class 
  <delete id="deleteAccountById" parameterClass="int">
    delete from ACCOUNT where ACC_ID = #id#
  </delete>-->

	<!--<typeAlias alias="TableTest" type="beans.TableTest"/>
	<resultMap class="TableTest" id="TableTestResult">
		<result property="testId" column="TEST_ID"/>
		<result property="testName" column="TEST_NAME"/>
	</resultMap>
	
	<select id="getTableTests" resultMap="TableTestResult">
		select * from TBL_TEST;
	</select>
	
	<select id="getTableTestById" resultClass="TableTest" parameterClass="int">
		select TEST_ID as testId, TEST_NAME as testName from TBL_TEST where TEST_ID=#testId#
	</select>
	
	<insert id="insertTableTest" parameterClass="TableTest">
		insert into TBL_TEST(
			TEST_ID,
			TEST_NAME
		) values(#testId#,#testName#)
	</insert>
	
	<update id="updateTableTest" parameterClass="TableTest">
		update TBL_TEST set TEST_NAME=#testName# where TEST_ID=#testId#
	</update>
	
	<delete id="deleteTableTest" parameterClass="int">
		delete from TBL_TEST where TEST_ID=#testId#
	</delete>-->
	
	<!-- 设置别名 ，如果设置Quotation为com.bornsoft.asn.bean.example.quotation.Quotation的别名
		 或者短名称 -->
	<typeAlias alias="Quotation" type="com.bornsoft.asn.bean.example.quotation.Quotation"/>
	<!-- 设置返回结果映射, id为以后select要使用的resultMap名称 -->
	<resultMap class="Quotation" id="getQuotation-result">
		<!-- 设置返回的结果属性，如果该CLASS的属性和数据表里字段对应，
			这不需要设置数据表字段，如这里的 quotationCode -->
		<result property="quotationCode" />
		<result property="quotationContent" column="QUOTATION_CONTENT"/>
		<result property="quotationName" column="QUOTATION_NAME"/>
		<result property="releaseDate" column="RELEASE_DATE"/>
		<result property="releasePerson" column="RELEASE_PERSON"/>
		<result property="source"/>
		<result property="updateDate" column="UPDATE_TIME"/>
		<result property="updatePerson"/>
	</resultMap>
	
	<!-- 插入  parameterClass为传入的参数类型,使用参数类属性的时候需要在属性
		两端添加#, 如#quotationName# -->
	<insert id="insertQuotation" parameterClass="Quotation">
		insert into QUOTATION(
			QUOTATION_NAME,
			QUOTATION_CONTENT,
			RELEASE_DATE,
			RELEASE_PERSON,
			SOURCE,
			UPDATE_TIME,
			UPDATE_PERSON
		) 
		values (
			#quotationName#,
			#quotationContent#,
			#releaseDate#,
			#releasePerson#,
			#source#,
			#updateDate#,
			#updatePerson#
		);
	</insert>
	
	<!-- 删除 -->
	<delete id="deleteQuotation" parameterClass="int">
		delete from QUOTATION where QUOTATION_CODE=#quotationCode#
	</delete>
	
	<!-- 修改 -->
	<update id="updateQuotation" parameterClass="Quotation">
		update QUOTATION set
			QUOTATION_NAME=#quotationName#,
			QUOTATION_CONTENT=#quotationContent#,
			RELEASE_DATE=#releaseDate#,
			RELEASE_PERSON=#releasePerson#,
			SOURCE=#source#,
			UPDATE_TIME=#updateDate#,
			UPDATE_PERSON=#updatePerson#
		where QUOTATION_CODE=#quotationCode#
	</update>
	
	<!-- 查询 resultMap为之前设置的result-Map ID -->
	<select id="getQuotation" resultMap="getQuotation-result" parameterClass="int">
		select * from QUOTATION where  QUOTATION_CODE=#quotationCode#
	</select>
	
	<select id="getQuotationList" resultMap="getQuotation-result">
		select * from QUOTATION
	</select>
	
	<!-- 注意 在设置类别名和各种操作ID的时候，最好不要出现重复的信息，好像IBATIS内部属性
		都是全局 -->
</sqlMap>